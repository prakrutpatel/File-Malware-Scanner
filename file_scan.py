import hash
import sys
import json
import requests
import os


filename = str(sys.argv[2])
filepath = str(os.path.abspath(filename))
hash_sha256 = hash.hash_function(filepath)     #Calculate hash value of the file using hash.py

apikey = str(sys.argv[1])   #API KEY set while building the script

hash_lookup_header = {
    'apikey': apikey,
}


try:
    #Retrieve scan reports by looking up the file's sha256 hash value
    hash_lookup_response = requests.request('GET', f'https://api.metadefender.com/v4/hash/{hash_sha256}', headers=hash_lookup_header)

except requests.exceptions.RequestException as err:
    raise Exception(err)

else:

    #If hash lookup came back with hash not found message then proceed to upload the file for scan
    if hash_lookup_response.status_code == 404:
        
        scan_upload_header = {
        'apikey': apikey,
        'filename': filename,
        }

        #Getting the raw binary of the file and encoding(Boundary, content-type, etc) it so that it can be uploaded as Multipart/form-data.
        file_as_binary = {'file': open(filepath, 'rb')}
        body, content_type = requests.models.RequestEncodingMixin._encode_files(file_as_binary, {})
        scan_upload_header['Content-Type'] = content_type
        
        
        try:
            scan_upload_response = requests.request('POST','https://api.metadefender.com/v4/file', headers=scan_upload_header, data=body)
        
        except requests.exceptions.RequestException as err:
            raise Exception(err)
        
        else:
            
            #If post was successful then proceed with the process
            if scan_upload_response.status_code == 200:
                
                data_id = json.loads(scan_upload_response.text)['data_id']    #Retreive data_id from the curl response

                fetch_scan_header = {
                'apikey': apikey,
                }

                while True:
                    #Repeatedly pull on the "data_id" to retrieve results
                    try:
                        fetch_scan_response = requests.request('GET',f'https://api.metadefender.com/v4/file/{data_id}', headers=fetch_scan_header)
                    
                    except requests.exceptions.RequestException as err:
                        raise Exception(err)
                    
                    else:
                        scan_result = json.loads(fetch_scan_response.text)
                        process_percent = scan_result['scan_results']['progress_percentage']
                        if(process_percent == 100):     #Stop the loop when all scan are finished running and results are available
                            break
                
                # Print in the results in desired format
                print('filename: ', scan_result['file_info']['display_name'])
                print('overall_status: ', scan_result['scan_results']['scan_all_result_a'])
                engine_results = scan_result['scan_results']['scan_details']
                
                for engine in engine_results:
                    print('engine: ', str(engine))
                    print('threat_found: ', str(engine_results[engine]['threat_found']))
                    print('scan_result: ', str(engine_results[engine]['scan_result_i']))
                    print('def_time: ', str(engine_results[engine]['def_time']))
            
            
            
            # If post was unsuccessful raise an exception and display the error
            else:
                raise Exception('Error {}'.format(json.loads(scan_upload_response.text)['error']['messages'][0]))

    
    
    #If hash lookup was successful then display the results in the correct format
    elif hash_lookup_response.status_code == 200: 
        scan_result = json.loads(hash_lookup_response.text)
        print('filename: ', scan_result['file_info']['display_name'])
        print('overall_status: ', scan_result['scan_results']['scan_all_result_a'])
        engine_results = scan_result['scan_results']['scan_details']
        for engine in engine_results:
            print('engine: ', str(engine))
            print('threat_found: ', str(engine_results[engine]['threat_found']))
            print('scan_result: ', str(engine_results[engine]['scan_result_i']))
            print('def_time: ', str(engine_results[engine]['def_time']))
    
    
    
    #If an status code was thrown while performing hash lookup then print the error code and the reason thrown
    else: 
        print("Error {} occured".format(hash_lookup_response.status_code))
        print("Response:", f'{hash_lookup_response.reason} - {json.loads(hash_lookup_response.text)["error"]["messages"][0]}')